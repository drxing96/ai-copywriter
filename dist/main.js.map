{
  "version": 3,
  "sources": ["../src/core.ts", "../src/CodeSpinButtonHtml.ts", "../src/chatGPT.ts", "../src/index.ts"],
  "sourcesContent": ["async function sendCodeToIDE(message: {\n  type: string;\n  projectPath: string;\n  filePath: string;\n  contents: string;\n}): Promise<void> {\n  const url = \"http://localhost:60280/send-to-ide\"; // Hardcoded URL\n\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(message),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to send code to IDE: ${response.statusText}`);\n    }\n\n    const responseData = await response.json();\n    console.log(\"Response from server:\", responseData);\n  } catch (error) {\n    console.error(\"Error sending code to IDE:\", error);\n  }\n}\n\nexport { sendCodeToIDE };\n", "export const CodeSpinButtonHtml = `\n<div class=\"flex items-center\">\n  <span class=\"\" data-state=\"closed\"><button class=\"flex gap-1 items-center\">\n      <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" stroke=\"#ffffff\" stroke-width=\"0.00024000000000000003\">\n        <g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g>\n        <g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g>\n        <g id=\"SVGRepo_iconCarrier\">\n          <path d=\"M18.43 4.25C18.2319 4.25259 18.0426 4.33244 17.9025 4.47253C17.7625 4.61263 17.6826 4.80189 17.68 5V7.43L16.84 6.59C15.971 5.71363 14.8924 5.07396 13.7067 4.73172C12.5209 4.38948 11.2673 4.35604 10.065 4.63458C8.86267 4.91312 7.7515 5.49439 6.83703 6.32318C5.92255 7.15198 5.23512 8.20078 4.84001 9.37C4.79887 9.46531 4.77824 9.56821 4.77947 9.67202C4.7807 9.77583 4.80375 9.87821 4.84714 9.97252C4.89052 10.0668 4.95326 10.151 5.03129 10.2194C5.10931 10.2879 5.20087 10.3392 5.30001 10.37C5.38273 10.3844 5.4673 10.3844 5.55001 10.37C5.70646 10.3684 5.85861 10.3186 5.98568 10.2273C6.11275 10.136 6.20856 10.0078 6.26001 9.86C6.53938 9.0301 7.00847 8.27681 7.63001 7.66C8.70957 6.58464 10.1713 5.98085 11.695 5.98085C13.2188 5.98085 14.6805 6.58464 15.76 7.66L16.6 8.5H14.19C13.9911 8.5 13.8003 8.57902 13.6597 8.71967C13.519 8.86032 13.44 9.05109 13.44 9.25C13.44 9.44891 13.519 9.63968 13.6597 9.78033C13.8003 9.92098 13.9911 10 14.19 10H18.43C18.5289 10.0013 18.627 9.98286 18.7186 9.94565C18.8102 9.90844 18.8934 9.85324 18.9633 9.78333C19.0333 9.71341 19.0885 9.6302 19.1257 9.5386C19.1629 9.44699 19.1814 9.34886 19.18 9.25V5C19.18 4.80109 19.101 4.61032 18.9603 4.46967C18.8197 4.32902 18.6289 4.25 18.43 4.25Z\" fill=\"#ffffff\"></path>\n          <path d=\"M18.68 13.68C18.5837 13.6422 18.4808 13.6244 18.3774 13.6277C18.274 13.6311 18.1724 13.6555 18.0787 13.6995C17.9851 13.7435 17.9015 13.8062 17.8329 13.8836C17.7643 13.9611 17.7123 14.0517 17.68 14.15C17.4006 14.9799 16.9316 15.7332 16.31 16.35C15.2305 17.4254 13.7688 18.0291 12.245 18.0291C10.7213 18.0291 9.25957 17.4254 8.18001 16.35L7.34001 15.51H9.81002C10.0089 15.51 10.1997 15.431 10.3403 15.2903C10.481 15.1497 10.56 14.9589 10.56 14.76C10.56 14.5611 10.481 14.3703 10.3403 14.2297C10.1997 14.089 10.0089 14.01 9.81002 14.01H5.57001C5.47115 14.0086 5.37302 14.0271 5.28142 14.0643C5.18982 14.1016 5.1066 14.1568 5.03669 14.2267C4.96677 14.2966 4.91158 14.3798 4.87436 14.4714C4.83715 14.563 4.81867 14.6611 4.82001 14.76V19C4.82001 19.1989 4.89903 19.3897 5.03968 19.5303C5.18034 19.671 5.3711 19.75 5.57001 19.75C5.76893 19.75 5.95969 19.671 6.10034 19.5303C6.241 19.3897 6.32001 19.1989 6.32001 19V16.57L7.16001 17.41C8.02901 18.2864 9.10761 18.926 10.2934 19.2683C11.4791 19.6105 12.7327 19.6439 13.935 19.3654C15.1374 19.0869 16.2485 18.5056 17.163 17.6768C18.0775 16.848 18.7649 15.7992 19.16 14.63C19.1926 14.5362 19.2061 14.4368 19.1995 14.3377C19.1929 14.2386 19.1664 14.1418 19.1216 14.0532C19.0768 13.9645 19.0146 13.8858 18.9387 13.8217C18.8629 13.7576 18.7749 13.7094 18.68 13.68Z\" fill=\"#ffffff\"></path>\n        </g>\n      </svg>CodeSpin Sync</button></span></div>`;\n", "import { sendCodeToIDE } from \"./core.js\";\nimport { CodeSpinButtonHtml } from \"./CodeSpinButtonHtml.js\";\n\n// Function to find the nearest parent with classes \"markdown\" and \"prose\"\n// and extract the first \"File path:...\" occurrence in the text content\nfunction findFilePathInMarkdownProse(element: HTMLElement): string | null {\n  const parent = element.closest(\".markdown.prose\");\n\n  if (parent) {\n    const paragraphs = parent.querySelectorAll(\"p\");\n    for (const paragraph of Array.from(paragraphs)) {\n      const textContent = paragraph.textContent || \"\";\n      console.log({ textContent });\n      const filePathMatch = textContent.match(/File path:(.*?)(?=\\n|$)/);\n      if (filePathMatch) {\n        return filePathMatch[1].trim();\n      }\n    }\n  }\n  return null;\n}\n\n// Function to extract the project root from the HTML\nfunction extractProjectRoot(): string | null {\n  const rootMatch = document.body.innerText.match(\n    /The project root is \"(.*?)\"/\n  );\n  return rootMatch ? rootMatch[1] : null;\n}\n\n// Separate function to handle the \"CodeSpin Sync\" button click\nfunction handleCodeSpinSyncClick(\n  preElement: HTMLElement,\n  projectRoot: string,\n  filePath: string\n) {\n  const codeText = preElement.querySelector(\"code\")?.innerText || \"\";\n\n  if (projectRoot && filePath && codeText) {\n    const message = {\n      type: \"code\",\n      projectPath: projectRoot,\n      filePath: filePath,\n      contents: codeText,\n    };\n    console.log({\n      message,\n    });\n    sendCodeToIDE(message);\n  } else {\n    console.error(\"Project root, file path, or code content is missing.\");\n  }\n}\n\n// Function to attach the \"CodeSpin Sync\" button specifically for ChatGPT\nfunction attachChatGPTButton(preElement: HTMLElement, projectRoot: string) {\n  const filePath = findFilePathInMarkdownProse(preElement);\n\n  if (!filePath) {\n    console.error(\"File path could not be found.\");\n    return;\n  }\n\n  // Find the \"Copy code\" button container to attach the CodeSpin Sync button\n  const copyButtonContainer = preElement.querySelector(\n    'div > div > div > span[data-state=\"closed\"]'\n  )?.parentElement;\n\n  if (copyButtonContainer) {\n    // Convert the CodeSpinButtonHtml string to a DOM element\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(CodeSpinButtonHtml, \"text/html\");\n    const codeSpinButtonElement = doc.body.firstChild as HTMLElement;\n\n    // Attach the click event using the separate function\n    codeSpinButtonElement.onclick = () =>\n      handleCodeSpinSyncClick(preElement, projectRoot, filePath);\n\n    // Insert the CodeSpin Sync button before the \"Copy code\" button\n    copyButtonContainer.parentElement?.insertBefore(\n      codeSpinButtonElement,\n      copyButtonContainer\n    );\n  } else {\n    console.error(\"Copy code button container could not be found.\");\n  }\n}\n\n// Function to scan and attach buttons to code blocks in ChatGPT\nexport function attachLinksForChatGPT() {\n  const codeBlocks = document.querySelectorAll(\"pre\");\n\n  // Extract the project root from the HTML content\n  const projectRoot = extractProjectRoot();\n\n  if (!projectRoot) {\n    console.error(\"Project root could not be found.\");\n    return;\n  }\n\n  codeBlocks.forEach((preElement) => {\n    if (!(preElement as any).attachedCodespinLink) {\n      console.log(`Code length: ${preElement.innerText.length}`);\n\n      // Attach the site-specific button\n      attachChatGPTButton(preElement as HTMLElement, projectRoot);\n\n      (preElement as any).attachedCodespinLink = true;\n    }\n  });\n}\n\n// Attach the CodeSpin buttons to code blocks\nsetTimeout(() => {\n  attachLinksForChatGPT();\n}, 1000);\n\n// Re-check for new code blocks every 3 seconds\nsetInterval(() => {\n  attachLinksForChatGPT();\n}, 3000);\n", "import * as chatGPT from \"./chatGPT.js\";\n\nfunction start() {\n  const app = getDomain();\n\n  function getDomain(): \"CHATGPT\" | \"CLAUDE\" | undefined {\n    const hostname = window.location.hostname;\n    if (hostname === \"chat.openai.com\") {\n      return \"CHATGPT\" as const;\n    } else if (hostname === \"claude.ai\") {\n      return \"CLAUDE\" as const;\n    }\n  }\n\n  if (app === \"CHATGPT\") {\n    chatGPT.attachLinksForChatGPT();\n  }\n}\n\n// Start the application\nstart();\n"],
  "mappings": "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",
  "names": ["sendCodeToIDE", "message", "url", "response", "responseData", "error", "CodeSpinButtonHtml", "findFilePathInMarkdownProse", "element", "parent", "paragraphs", "paragraph", "textContent", "filePathMatch", "extractProjectRoot", "rootMatch", "handleCodeSpinSyncClick", "preElement", "projectRoot", "filePath", "_a", "codeText", "message", "sendCodeToIDE", "attachChatGPTButton", "_b", "copyButtonContainer", "codeSpinButtonElement", "CodeSpinButtonHtml", "attachLinksForChatGPT", "codeBlocks", "start", "app", "getDomain", "hostname", "attachLinksForChatGPT"]
}
